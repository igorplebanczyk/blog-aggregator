// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_follows.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO feed_follows (id, user_id, feed_id)
VALUES ($1, $2, $3)
RETURNING id, user_id, feed_id
`

type CreateFeedFollowParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.ID, arg.UserID, arg.FeedID)
	var i FeedFollow
	err := row.Scan(&i.ID, &i.UserID, &i.FeedID)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :one
DELETE FROM feed_follows
WHERE id = $1
RETURNING id, user_id, feed_id
`

func (q *Queries) DeleteFeedFollow(ctx context.Context, id uuid.UUID) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, deleteFeedFollow, id)
	var i FeedFollow
	err := row.Scan(&i.ID, &i.UserID, &i.FeedID)
	return i, err
}

const getFeedFollowByFeedAndUserId = `-- name: GetFeedFollowByFeedAndUserId :one
SELECT id
FROM feed_follows
WHERE feed_id = $1 AND user_id = $2
`

type GetFeedFollowByFeedAndUserIdParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetFeedFollowByFeedAndUserId(ctx context.Context, arg GetFeedFollowByFeedAndUserIdParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getFeedFollowByFeedAndUserId, arg.FeedID, arg.UserID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getFeedFollowsByUserId = `-- name: GetFeedFollowsByUserId :many
SELECT id, user_id, feed_id
FROM feed_follows
WHERE user_id = $1
`

func (q *Queries) GetFeedFollowsByUserId(ctx context.Context, userID uuid.UUID) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(&i.ID, &i.UserID, &i.FeedID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
